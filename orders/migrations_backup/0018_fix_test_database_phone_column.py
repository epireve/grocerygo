# Generated by Django 5.0.4 on 2025-06-08 08:31
from django.db import migrations


class Migration(migrations.Migration):
    dependencies = [
        ("orders", "0017_fix_test_database_schema"),
    ]

    operations = [
        migrations.RunSQL(
            # Forward SQL - Direct fix for duplicate phone column
            """
            -- Disable foreign key constraints
            PRAGMA foreign_keys=off;
            
            -- First, check if the table exists
            SELECT CASE WHEN EXISTS (
                SELECT 1 FROM sqlite_master WHERE type='table' AND name='orders_address'
            ) THEN (
                -- Create a completely new table with correct schema
                CREATE TABLE IF NOT EXISTS _orders_address_temp (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    address_type VARCHAR(10) NOT NULL,
                    full_name VARCHAR(255) NOT NULL,
                    street_address VARCHAR(255) NOT NULL,
                    apartment_unit VARCHAR(255) NULL,
                    city VARCHAR(100) NOT NULL,
                    state VARCHAR(100) NOT NULL,
                    postal_code VARCHAR(20) NOT NULL,
                    country VARCHAR(100) NOT NULL,
                    phone VARCHAR(50) NULL,
                    is_default BOOL NOT NULL,
                    created_at DATETIME NOT NULL,
                    updated_at DATETIME NOT NULL,
                    user_id INTEGER NOT NULL REFERENCES auth_user (id)
                );
                
                -- Copy data from existing table if possible, handling potential column differences
                INSERT OR IGNORE INTO _orders_address_temp (
                    id, address_type, full_name, street_address, apartment_unit, 
                    city, state, postal_code, country, phone,
                    is_default, created_at, updated_at, user_id
                )
                SELECT 
                    id, 
                    address_type, 
                    full_name, 
                    street_address, 
                    COALESCE(apartment_unit, apartment_address, ''), 
                    city, 
                    state, 
                    postal_code, 
                    country, 
                    (SELECT phone FROM orders_address WHERE id=orders_address.id LIMIT 1), 
                    is_default, 
                    created_at, 
                    updated_at, 
                    user_id
                FROM orders_address LIMIT 1;
                
                -- Drop the original table regardless of errors
                DROP TABLE IF EXISTS orders_address;
                
                -- Rename our temporary table to the correct name
                ALTER TABLE _orders_address_temp RENAME TO orders_address;
                
                -- Recreate indices
                CREATE INDEX orders_address_user_id ON orders_address (user_id);
            ) ELSE (
                -- If table doesn't exist, create it with correct schema
                CREATE TABLE IF NOT EXISTS orders_address (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    address_type VARCHAR(10) NOT NULL,
                    full_name VARCHAR(255) NOT NULL,
                    street_address VARCHAR(255) NOT NULL,
                    apartment_unit VARCHAR(255) NULL,
                    city VARCHAR(100) NOT NULL,
                    state VARCHAR(100) NOT NULL,
                    postal_code VARCHAR(20) NOT NULL,
                    country VARCHAR(100) NOT NULL,
                    phone VARCHAR(50) NULL,
                    is_default BOOL NOT NULL,
                    created_at DATETIME NOT NULL,
                    updated_at DATETIME NOT NULL,
                    user_id INTEGER NOT NULL REFERENCES auth_user (id)
                );
                CREATE INDEX orders_address_user_id ON orders_address (user_id);
            ) END;
            
            -- Re-enable foreign key constraints
            PRAGMA foreign_keys=on;
            """,
            # Reverse SQL - No need for reverse operation
            "SELECT 1;",
        ),
    ]
