# Generated by Django 5.0.4 on 2025-06-08 00:23
from django.db import migrations


class Migration(migrations.Migration):
    dependencies = [
        ("orders", "0008_remove_deprecated_models"),
    ]

    operations = [
        migrations.RunSQL(
            # Forward SQL - Complete database cleanup
            """
            PRAGMA foreign_keys=off;
            
            -- Fix Address table
            CREATE TABLE orders_address_new (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                address_type VARCHAR(10) NOT NULL,
                full_name VARCHAR(255) NOT NULL,
                street_address VARCHAR(255) NOT NULL,
                apartment_unit VARCHAR(255) NULL,
                city VARCHAR(100) NOT NULL,
                state VARCHAR(100) NOT NULL,
                postal_code VARCHAR(20) NOT NULL,
                country VARCHAR(100) NOT NULL,
                phone VARCHAR(50) NULL,
                is_default BOOL NOT NULL,
                created_at DATETIME NOT NULL,
                updated_at DATETIME NOT NULL,
                user_id INTEGER NOT NULL REFERENCES auth_user (id)
            );
            
            -- Copy data
            INSERT INTO orders_address_new 
            SELECT id, address_type, full_name, street_address, 
                   COALESCE(apartment_unit, apartment_address), -- Use either field, preferring unit if exists
                   city, state, postal_code, country, phone, 
                   is_default, created_at, updated_at, user_id 
            FROM orders_address;
            
            -- Drop old table
            DROP TABLE orders_address;
            
            -- Rename new table
            ALTER TABLE orders_address_new RENAME TO orders_address;
            
            -- Recreate indices
            CREATE INDEX orders_address_user_id ON orders_address (user_id);
            
            -- Fix OrderStatusHistory table if it exists and has issues
            CREATE TABLE orders_orderstatushistory_new (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                status VARCHAR(20) NOT NULL,
                notes TEXT NULL,
                created_at DATETIME NOT NULL,
                created_by_id INTEGER NULL REFERENCES auth_user (id),
                checkout_id INTEGER NOT NULL REFERENCES orders_checkout (id)
            );
            
            -- Copy data - this handles both order_id and checkout_id scenarios
            INSERT INTO orders_orderstatushistory_new (id, status, notes, created_at, created_by_id, checkout_id)
            SELECT id, status, notes, created_at, created_by_id, 
                   CASE 
                     WHEN checkout_id IS NOT NULL THEN checkout_id 
                     ELSE COALESCE(order_id, id) -- Fall back to ID if both are NULL
                   END
            FROM orders_orderstatushistory;
            
            -- Drop old table
            DROP TABLE orders_orderstatushistory;
            
            -- Rename new table
            ALTER TABLE orders_orderstatushistory_new RENAME TO orders_orderstatushistory;
            
            -- Recreate indices
            CREATE INDEX orders_orderstatushistory_created_by_id ON orders_orderstatushistory (created_by_id);
            CREATE INDEX orders_orderstatushistory_checkout_id ON orders_orderstatushistory (checkout_id);
            
            PRAGMA foreign_keys=on;
            """,
            # Reverse SQL - We don't need to reverse this, it's a fix
            "SELECT 1;",
        ),
    ]
