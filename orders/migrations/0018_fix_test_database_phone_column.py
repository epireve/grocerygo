# Generated by Django 5.0.4 on 2025-06-08 08:31
from django.db import migrations
import sqlite3


def fix_address_table(apps, schema_editor):
    """
    Fix the address table schema to handle duplicate phone column issues.
    Works for both existing databases and fresh test databases.
    """
    db_alias = schema_editor.connection.alias

    # Get the database connection
    connection = schema_editor.connection

    with connection.cursor() as cursor:
        # Check if the table exists
        cursor.execute(
            """
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='orders_address';
        """
        )
        table_exists = cursor.fetchone() is not None

        if table_exists:
            # Check the current schema
            cursor.execute("PRAGMA table_info(orders_address);")
            columns = cursor.fetchall()
            column_names = [col[1] for col in columns]

            # Check if we have duplicate phone columns or other issues
            phone_count = column_names.count("phone")
            has_apartment_unit = "apartment_unit" in column_names
            has_apartment_address = "apartment_address" in column_names

            if phone_count > 1 or not has_apartment_unit:
                # Need to recreate the table
                cursor.execute("PRAGMA foreign_keys=off;")

                # Create temporary table with correct schema
                cursor.execute(
                    """
                    CREATE TABLE _orders_address_temp (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        address_type VARCHAR(10) NOT NULL,
                        full_name VARCHAR(255) NOT NULL,
                        street_address VARCHAR(255) NOT NULL,
                        apartment_unit VARCHAR(255) NULL,
                        city VARCHAR(100) NOT NULL,
                        state VARCHAR(100) NOT NULL,
                        postal_code VARCHAR(20) NOT NULL,
                        country VARCHAR(100) NOT NULL,
                        phone VARCHAR(50) NULL,
                        is_default BOOL NOT NULL,
                        created_at DATETIME NOT NULL,
                        updated_at DATETIME NOT NULL,
                        user_id INTEGER NOT NULL REFERENCES auth_user (id)
                    );
                """
                )

                # Copy data, handling various column scenarios
                try:
                    if has_apartment_unit and has_apartment_address:
                        # Both columns exist, prefer apartment_unit
                        cursor.execute(
                            """
                            INSERT INTO _orders_address_temp (
                                id, address_type, full_name, street_address, apartment_unit,
                                city, state, postal_code, country, phone,
                                is_default, created_at, updated_at, user_id
                            )
                            SELECT 
                                id, address_type, full_name, street_address, 
                                COALESCE(apartment_unit, apartment_address, ''),
                                city, state, postal_code, country,
                                phone,
                                is_default, created_at, updated_at, user_id
                            FROM orders_address;
                        """
                        )
                    elif has_apartment_address and not has_apartment_unit:
                        # Only apartment_address exists, rename it
                        cursor.execute(
                            """
                            INSERT INTO _orders_address_temp (
                                id, address_type, full_name, street_address, apartment_unit,
                                city, state, postal_code, country, phone,
                                is_default, created_at, updated_at, user_id
                            )
                            SELECT 
                                id, address_type, full_name, street_address, apartment_address,
                                city, state, postal_code, country,
                                phone,
                                is_default, created_at, updated_at, user_id
                            FROM orders_address;
                        """
                        )
                    else:
                        # Standard copy
                        cursor.execute(
                            """
                            INSERT INTO _orders_address_temp (
                                id, address_type, full_name, street_address, apartment_unit,
                                city, state, postal_code, country, phone,
                                is_default, created_at, updated_at, user_id
                            )
                            SELECT 
                                id, address_type, full_name, street_address, 
                                COALESCE(apartment_unit, ''),
                                city, state, postal_code, country,
                                phone,
                                is_default, created_at, updated_at, user_id
                            FROM orders_address;
                        """
                        )
                except sqlite3.Error:
                    # If copy fails, just create empty table
                    pass

                # Replace the table
                cursor.execute("DROP TABLE orders_address;")
                cursor.execute(
                    "ALTER TABLE _orders_address_temp RENAME TO orders_address;"
                )

                # Recreate index
                cursor.execute(
                    "CREATE INDEX orders_address_user_id ON orders_address (user_id);"
                )

                cursor.execute("PRAGMA foreign_keys=on;")
        else:
            # Table doesn't exist, create it with correct schema
            cursor.execute(
                """
                CREATE TABLE orders_address (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    address_type VARCHAR(10) NOT NULL,
                    full_name VARCHAR(255) NOT NULL,
                    street_address VARCHAR(255) NOT NULL,
                    apartment_unit VARCHAR(255) NULL,
                    city VARCHAR(100) NOT NULL,
                    state VARCHAR(100) NOT NULL,
                    postal_code VARCHAR(20) NOT NULL,
                    country VARCHAR(100) NOT NULL,
                    phone VARCHAR(50) NULL,
                    is_default BOOL NOT NULL,
                    created_at DATETIME NOT NULL,
                    updated_at DATETIME NOT NULL,
                    user_id INTEGER NOT NULL REFERENCES auth_user (id)
                );
            """
            )
            cursor.execute(
                "CREATE INDEX orders_address_user_id ON orders_address (user_id);"
            )


class Migration(migrations.Migration):
    dependencies = [
        ("orders", "0017_fix_test_database_schema"),
    ]

    operations = [
        migrations.RunPython(
            fix_address_table,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
